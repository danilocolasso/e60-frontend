import {
  {{pascalCase featureName}}UpdatePayload,
  {{camelCase featureName}}UpdateSchema,
} from '@/schemas/{{kebabCase featureName}}/{{camelCase featureName}}UpdateSchema'
import { {{camelCase featureName}}EditService } from '@/services/{{kebabCase featureName}}/{{kebabCase featureName}}-edit.service'
import { {{camelCase featureName}}UpdateService } from '@/services/{{kebabCase featureName}}/{{kebabCase featureName}}-update.service'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { useNavigate, useParams } from 'react-router-dom'
import { toast } from 'react-toastify'
import { useEffect } from 'react'

export const use{{pascalCase featureName}}Edit = () => {
  const navigate = useNavigate()
  const { id } = useParams()

  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm<{{pascalCase featureName}}UpdatePayload>({
    resolver: zodResolver({{camelCase featureName}}UpdateSchema),
  })

  const fetch = async () => {
    try {
      const data = await {{camelCase featureName}}EditService({ id: Number(id) })
      reset(data)
    } catch (error) {
      toast.error(
        'Ocorreu um erro ao buscar {{article}} {{lowerCase displayName}}. Por favor, tente novamente mais tarde',
      )
    }
  }

  useEffect(() => {
    fetch()
  }, [reset])

  const onSubmit = async (data: {{pascalCase featureName}}UpdatePayload) => {
    const id = toast.loading('Salvando...')
    try {
      await {{camelCase featureName}}UpdateService(data)
      toast.update(id, {
        render: '{{capitalize displayName}} atualizad{{article}} com sucesso',
        type: 'success',
        isLoading: false,
        autoClose: 3000,
      })
      navigate('/{{routeName}}')
    } catch (error: any) {
      toast.update(id, {
        render:
          error.response?.data?.message ??
          'Ocorreu um erro ao atualizar {{article}} {{lowerCase displayName}}. Por favor, tente novamente mais tarde',
        type: 'error',
        isLoading: false,
        autoClose: 3000,
      })
    }
  }

  return {
    register,
    control,
    handleSubmit: handleSubmit(onSubmit),
    errors,
  }
}
